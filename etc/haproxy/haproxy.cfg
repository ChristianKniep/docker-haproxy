#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   http://haproxy.1wt.eu/download/1.4/doc/configuration.txt
#############
##### 2014-05-21 christian@qnib.org
# Adapted to serve as a proxy in front of a docker cluster
# HAPROXY forwards request to multiple containers based on the uri
# /foswiki -> foswiki:80
# /graphite -> graphite:80
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log         127.0.0.1 local2

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    daemon

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000

#---------------------------------------------------------------------
# main frontend which proxys to the backends
#---------------------------------------------------------------------
frontend http-in
    bind *:80
    acl uri_kibana path_beg /kibana
    use_backend srv_kibana if uri_kibana
    acl uri_grafana path_beg /grafana
    use_backend srv_grafana if uri_grafana
    # graphite-api
    acl uri_gapi path_beg /graphite-api
    use_backend srv_gapi if uri_gapi
    # graphite stuff
    acl uri_graphite path_beg /graphite
    acl uri_graphite path_beg /account
    acl uri_graphite path_beg /composer
    acl uri_graphite path_beg /content
    acl uri_graphite path_beg /metrics
    acl uri_graphite path_beg /render
    acl uri_graphite path_beg /events
    acl uri_graphite path_beg /graphlot
    acl uri_graphite path_beg /dashboard
    acl uri_graphite path_beg /browser
    acl uri_graphite path_beg /admin
    use_backend srv_graphite if uri_graphite

backend srv_grafana
    balance roundrobin
    cookie SERVERID insert
    option httpclose
    option forwardfor
    server grafana grafana:80 cookie grafana check

backend srv_gapi
    balance roundrobin
    cookie SERVERID insert
    option httpclose
    option forwardfor
    server graphite-api graphite-api:80 cookie graphite-api check

backend srv_kibana
    balance roundrobin
    cookie SERVERID insert
    option httpclose
    option forwardfor
    server elk elk:80 cookie elk check

backend srv_graphite
    balance roundrobin
    cookie SERVERID insert
    option httpclose
    option forwardfor
    server graphite graphite:80 cookie graphite check

frontend es-in
    bind *:9200
    default_backend srv_es

backend srv_es
    balance leastconn
    server es elk:9200
